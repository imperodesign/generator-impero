'use strict'

const yeoman = require('yeoman-generator')
const chalk = require('chalk')
const emoji = require('node-emoji')
const yosay = require('yosay')
const extend = require('lodash').merge
const commandExists = require('command-exists')
const validateNpmName = require('validate-npm-package-name')
const sortNpmDeps = require('./sortNpmDeps')

module.exports = yeoman.Base.extend({
  prompting () {
    // Have Yeoman greet the user.
    this.log(yosay(
      `Welcome to the ${chalk.yellow('Impero')} generator!`
    ))

    this.log(`\n---\nNote that Yeoman will generate the project within the CWD... ${emoji.get('skull_and_crossbones')}\n---\n`)

    const prompts = [{
      type: 'input',
      name: 'projectName',
      message: `Your project name (must be ${chalk.underline('unique')} and ${chalk.underline('alphanumeric only')})?`,
      // Defaults to the project's folder name if the input is skipped
      default: this.appname,
      validate: input => validateNpmName(input).validForNewPackages
    }, {
      type: 'input',
      name: 'description',
      message: 'Your project description?',
      default: 'A new project generated by the Impero generator'
    }, {
      type: 'list',
      name: 'cssLang',
      message: 'Which CSS preprocessor?',
      choices: [
        {
          name: chalk.gray('Sourdough / SSS'),
          disabled: 'Requires a Webpack-compatible loader to be developed.',
          value: {
            name: 'Sourdough',
            templateDir: 'sourdough',
            loader: 'sourdough',
            fileExt: 'sss'
          }
        },
        {
          name: 'Sass',
          value: {
            name: 'sass',
            templateDir: 'sass',
            loader: 'sass',
            fileExt: 'sass'
          }
        },
        {
          name: 'Sass (SCSS)',
          value: {
            name: 'scss',
            templateDir: 'scss',
            loader: 'sass',
            fileExt: 'scss'
          }
        },
        {
          name: 'Stylus',
          value: {
            name: 'stylus',
            templateDir: 'stylus',
            loader: 'stylus',
            fileExt: 'styl'
          }
        }
      ],
      default: 0
    }, {
      type: 'list',
      name: 'jsLang',
      message: 'Which JS feature set? (all include ES2015+ w/ Babel transpilation)',
      choices: [
        {
          name: 'Vanilla',
          value: {
            name: 'vanilla',
            templateDir: 'vanilla',
            loader: 'babel',
            fileExt: 'js',
            linter: 'eslint'
          }
        },
        {
          name: 'React',
          value: {
            name: 'react',
            templateDir: 'react',
            loader: 'babel',
            fileExt: 'js',
            linter: 'eslint'
          }
        },
        {
          name: chalk.gray('TypeScript'),
          disabled: 'Dev work required. Coming soon!',
          value: {
            name: 'typescript',
            templateDir: 'typescript',
            loader: 'babel!ts?sourceMap',
            fileExt: 'ts',
            linter: 'tslint'
          }
        }
      ],
      default: 0
    }, {
      type: 'list',
      name: 'browserSupport',
      message: 'Browser support?',
      choices: [
        {name: 'Legacy (IE9+)', value: 'legacy'},
        {name: 'Modern (Chrome, Firefox, Edge, Safari)', value: 'modern'}
      ],
      default: 'legacy'
    }, {
      type: 'confirm',
      name: 'copyEnv',
      message: 'Copy .env.example to .env?',
      default: true
    }, {
      type: 'confirm',
      name: 'installDeps',
      message: 'Install dependencies?',
      default: true
    }]

    return this.prompt(prompts).then(answers => {
      // To access props later use this.props.exampleAnswer
      this.props = answers

      // Pass the project name to a potential parent generator
      this.options.projectName = this.props.projectName
    })
  },

  writing () {
    // Copy templated files
    this.fs.copyTpl(
      this.templatePath('.editorconfig'),
      this.destinationPath('.editorconfig'), {
        cssExt: this.props.cssLang.fileExt
      }
    )
    this.fs.copyTpl(
      this.templatePath('package.json'),
      this.destinationPath('package.json'), {
        name: this.props.projectName,
        description: this.props.description
      }
    )
    this.fs.copyTpl(
      this.templatePath('_README.md'),
      this.destinationPath('README.md'), {
        name: this.props.projectName,
        description: this.props.description,
        browserSupport: this.props.browserSupport
      }
    )
    this.fs.copyTpl(
      this.templatePath('webpack.config.js'),
      this.destinationPath('webpack.config.js'), {
        cssLang: this.props.cssLang.name,
        cssLoader: this.props.cssLang.loader,
        cssExt: this.props.cssLang.fileExt,
        jsLang: this.props.jsLang.name,
        jsLoader: this.props.jsLang.loader,
        jsExt: this.props.jsLang.fileExt,
        jsLinter: this.props.jsLang.linter,
        browserSupport: this.props.browserSupport
      }
    )
    this.fs.copyTpl(
      this.templatePath('webpack.production.config.js'),
      this.destinationPath('webpack.production.config.js'), {
        cssLang: this.props.cssLang.name,
        cssLoader: this.props.cssLang.loader,
        cssExt: this.props.cssLang.fileExt,
        jsLang: this.props.jsLang.name,
        jsLoader: this.props.jsLang.loader,
        jsExt: this.props.jsLang.fileExt,
        jsLinter: this.props.jsLang.linter,
        browserSupport: this.props.browserSupport
      }
    )

    // Copy untemplated files
    this.fs.copy(
      this.templatePath('.env.example'),
      this.destinationPath('.env.example')
    )
    if (this.props.copyEnv) this.fs.copy(
      this.templatePath('.env.example'),
      this.destinationPath('.env')
    )
    if (this.props.jsLang.name !== 'typescript') this.fs.copyTpl(
      this.templatePath('.eslintrc'),
      this.destinationPath('.eslintrc'), {
        jsLang: this.props.jsLang.name
      }
    )
    // Prefixed with an underscore, else npm will rename it to .npmignore
    this.fs.copy(
      this.templatePath('_.gitignore'),
      this.destinationPath('.gitignore')
    )
    this.fs.copy(
      this.templatePath('CHANGELOG.md'),
      this.destinationPath('CHANGELOG.md')
    )
    if (this.props.jsLang.name === 'typescript') this.fs.copy(
      this.templatePath('tslint.json'),
      this.destinationPath('tslint.json')
    )
    this.fs.copy(
      this.templatePath('app/assets/humans.txt'),
      this.destinationPath('app/assets/humans.txt')
    )
    this.fs.copy(
      this.templatePath('app/assets/img'),
      this.destinationPath('app/assets/img')
    )
    this.fs.copy(
      this.templatePath('app/views'),
      this.destinationPath('app/views')
    )
    this.fs.copy(
      this.templatePath('app/index.js'),
      this.destinationPath('app/index.js')
    )
    this.fs.copy(
      this.templatePath('app/routes.js'),
      this.destinationPath('app/routes.js')
    )

    // Copy CSS
    this.fs.copy(
      this.templatePath(`app/src/_styles/${this.props.cssLang.templateDir}`),
      this.destinationPath('app/src/styles')
    )

    // Copy JS
    this.fs.copyTpl(
      this.templatePath(`app/src/_scripts/${this.props.jsLang.templateDir}/main.${this.props.jsLang.fileExt}`),
      this.destinationPath(`app/src/scripts/main.${this.props.jsLang.fileExt}`), {
        browserSupport: this.props.browserSupport
      }
    )
    this.fs.copy(
      this.templatePath(`app/src/_scripts/${this.props.jsLang.templateDir}/modules`),
      this.destinationPath('app/src/scripts/modules')
    )

    // Load dependencies from generated/copied package.json
    let deps = this.fs.readJSON(this.destinationPath('package.json'), {})

    // Define optional dependencies
    const legacyOptionalDeps = {
      'classlist.js': '^1.1.20150312',
      'es6-promise': '^4.0.3',
      'matchmedia-polyfill': '^0.3.0',
    }

    const cssOptionalDevDeps = {
      'sourdough': {},
      'sass': {
        'breakpoint-sass': '^2.7.0',
        'node-sass': '^3.9.3',
        'sass-loader': '^4.0.2'
      },
      'scss': {
        'breakpoint-sass': '^2.7.0',
        'node-sass': '^3.10.0',
        'sass-loader': '^4.0.2'
      },
      'stylus': {
        'rupture': '^0.6.1',
        'stylus': '^0.54.5',
        'stylus-loader': '^2.3.1'
      }
    }

    const jsOptionalDeps = {
      'vanilla': {},
      'react': {
        'react': '^15.3.2',
        'react-dom': '^15.3.2'
      },
      'typescript': {}
    }

    const jsOptionalDevDeps = {
      'vanilla': {
        'babel-eslint': '^7.0.0',
        'eslint': '^3.5.0',
        'eslint-config-standard': '^6.0.1',
        'eslint-loader': '^1.5.0',
        'eslint-plugin-promise': '^2.0.1',
        'eslint-plugin-standard': '^2.0.0'
      },
      'react': {
        'babel-eslint': '^7.0.0',
        'babel-preset-react': '^6.11.1',
        'eslint': '^3.5.0',
        'eslint-config-standard': '^6.0.1',
        'eslint-config-standard-jsx': '^3.0.1',
        'eslint-config-standard-react': '^4.0.2',
        'eslint-loader': '^1.5.0',
        'eslint-plugin-promise': '^2.0.1',
        'eslint-plugin-react': '^6.3.0',
        'eslint-plugin-standard': '^2.0.0',
        'react-hot-loader': '^3.0.0-beta.5'
      },
      'typescript': {
        'ts-loader': '^0.8.2',
        'tslint': '^3.15.1',
        'tslint-loader': '^2.1.5',
        'typescript': '^1.8.10'
      }
    }

    // Merge them as selected
    if (this.props.browserSupport === 'legacy') extend(deps, {
      dependencies: legacyOptionalDeps
    })

    extend(deps, {
      dependencies: jsOptionalDeps[this.props.jsLang.name]
    })

    extend(deps, {
      devDependencies: cssOptionalDevDeps[this.props.cssLang.name]
    })

    extend(deps, {
      devDependencies: jsOptionalDevDeps[this.props.jsLang.name]
    })

    // Sort the dependencies
    sortNpmDeps(deps)

    // Write to file
    this.fs.writeJSON(this.destinationPath('package.json'), deps)
  },

  install () {
    if (!this.props.installDeps) return

    // Install dependencies in scaffolded package.json
    // Use Yarn if available
    commandExists('yarn', (err, yes) => {
      if (yes) {
        this.log(`\n---\nNearly done! All that's left now is to run ${chalk.bgYellow.black('yarn install')}. Here goes... ${emoji.get('v')}\n---\n`)
        this.spawnCommand('yarn', ['install'])
      } else {
        // The installDependencies function built-in to Yeoman does not work
        // inside this commandExists function:
        // this.installDependencies({ bower: false })
        this.log(`\n---\nNearly done! All that's left now is to run ${chalk.bgYellow.black('npm install')}. Here goes... ${emoji.get('v')}\n---\n`)
        this.spawnCommand('npm', ['install'])
      }
    })

    // if (this.props.jsLang.name === 'typescript') // TODO install 'typings' globally if typescript option selected
  }
})
